{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.neighbors import NearestNeighbors\n",
    "from scipy.sparse import csr_matrix\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.neighbors import kneighbors_graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "year = 2019\n",
    "url_per_100 = \"https://www.basketball-reference.com/leagues/NBA_{}_per_poss.html\".format(year)\n",
    "html_per_100 = requests.get(url_per_100)\n",
    "soup_per_100 = BeautifulSoup(html_per_100.text, 'html.parser')\n",
    "\n",
    "url_adv = \"https://www.basketball-reference.com/leagues/NBA_{}_advanced.html\".format(year)\n",
    "html_adv = requests.get(url_adv)\n",
    "soup_adv = BeautifulSoup(html_adv.text, 'html.parser')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "table_per_100 = soup_per_100.find_all('table')\n",
    "table_adv = soup_adv.find_all('table')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "nba_df_per_100 = pd.read_html(str(table_per_100))[0]\n",
    "nba_df_per_100.drop(columns=['Unnamed: 29','Rk'],inplace=True)\n",
    "nba_df_per_100 = nba_df_per_100.loc[~(nba_df_per_100['Player'] == 'Player')]\n",
    "nba_df_per_100['G'] = nba_df_per_100['G'].astype(int)\n",
    "nba_df_per_100['max_game_filter'] = nba_df_per_100.groupby(['Player'])['G'].transform('max')\n",
    "nba_df_per_100 = nba_df_per_100.loc[nba_df_per_100['G'] == nba_df_per_100['max_game_filter']]\n",
    "nba_df_per_100.drop(columns=['max_game_filter','Age','Tm','G','GS','MP'],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "nba_df_adv = pd.read_html(str(table_adv))[0]\n",
    "nba_df_adv.drop(columns=['Unnamed: 19','Unnamed: 24'],inplace=True)\n",
    "nba_df_adv = nba_df_adv.loc[~(nba_df_adv['Rk'] == 'Rk')]\n",
    "nba_df_adv['G'] = nba_df_adv['G'].astype(int)\n",
    "nba_df_adv['max_game_filter'] = nba_df_adv.groupby(['Player'])['G'].transform('max')\n",
    "nba_df_adv = nba_df_adv.loc[nba_df_adv['G'] == nba_df_adv['max_game_filter']]\n",
    "nba_df_adv.drop(columns=['Rk','Pos','Age','Tm','G','MP','max_game_filter'],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "nba_df = nba_df_per_100.merge(nba_df_adv, on='Player')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "url_shooting = \"https://www.basketball-reference.com/leagues/NBA_{}_shooting.html\".format(year)\n",
    "html_shooting = requests.get(url_shooting)\n",
    "soup_shooting = BeautifulSoup(html_shooting.text,'html.parser')\n",
    "table_shooting = soup_shooting.find_all('table')\n",
    "nba_df_shooting = pd.read_html(str(table_shooting))[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "nba_df_shooting.columns = ['|'.join(col).strip() for col in nba_df_shooting.columns.values]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "nba_df_shooting['Player'] = nba_df_shooting['Unnamed: 1_level_0|Player'].str.lstrip('P')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "nba_df_shooting = nba_df_shooting.loc[~(nba_df_shooting['Unnamed: 1_level_0|Player'] == 'Player')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "nba_df_shooting['Unnamed: 5_level_0|G'] = nba_df_shooting['Unnamed: 5_level_0|G'].astype(int)\n",
    "nba_df_shooting['max_game_filter'] = nba_df_shooting.groupby(['Unnamed: 1_level_0|Player'])['Unnamed: 5_level_0|G'].transform('max')\n",
    "nba_df_shooting = nba_df_shooting.loc[nba_df_shooting['Unnamed: 5_level_0|G'] == nba_df_shooting['max_game_filter']]\n",
    "nba_df_shooting.drop(columns=['max_game_filter'],inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "nba_df_shooting = nba_df_shooting.loc[:,~nba_df_shooting.columns.str.startswith('Unnamed')]\n",
    "nba_df_shooting = nba_df_shooting.loc[:,~(nba_df_shooting.columns.str.contains('Ast')) \n",
    "                                      & ~(nba_df_shooting.columns.str.contains('Dunk'))\n",
    "                                      & ~(nba_df_shooting.columns.str.contains('Heave'))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "nba_df = nba_df.merge(nba_df_shooting, on='Player')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "nba_df.fillna(0,inplace=True)\n",
    "nba_df_copy = nba_df.copy()\n",
    "nba_df.drop(columns=['Pos'],inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "nba_df.set_index('Player',inplace=True)\n",
    "nba_df_scaled = StandardScaler().fit_transform(nba_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "nba_df_final = pd.DataFrame(index=nba_df.index, columns=nba_df.columns, data=nba_df_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "nba_df_feature_matrix = csr_matrix(nba_df_final.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "knn_search = NearestNeighbors(metric='cosine', algorithm='brute')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "NearestNeighbors(algorithm='brute', metric='cosine')"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn_search.fit(nba_df_feature_matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "query_index = np.random.choice(nba_df_final.shape[0])\n",
    "distances, indices = knn_search.kneighbors(nba_df_final.iloc[query_index,:].values.reshape(1,-1), n_neighbors=11)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(0,len(distances.flatten())):\n",
    "\n",
    "    if i == 0:\n",
    "        print('Top Player Recommendations for: {}'.format(nba_df_final.index[query_index]))\n",
    "    else:\n",
    "        print('{}: {} with a Distance Score of: {}'.format(i, nba_df_final.index[indices.flatten()[i]],distances.flatten()[i]))\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "player_list = []\n",
    "rec_list = []\n",
    "\n",
    "for player in nba_df_final.index:\n",
    "    distances, indices = knn_search.kneighbors(nba_df_final.loc[player,:].values.reshape(1,-1), n_neighbors=11)\n",
    "    \n",
    "    for elem in range(0,len(distances.flatten())):\n",
    "        if elem == 0:\n",
    "            player_list.append([player])\n",
    "        else:\n",
    "            rec_list.append([player, elem, nba_df_final.index[indices.flatten()[elem]],distances.flatten()[elem]])\n",
    "\n",
    "\n",
    "recommendation_df = pd.DataFrame(rec_list, columns=['search_player','rec_number','rec_player','distance_score'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>search_player</th>\n",
       "      <th>rec_number</th>\n",
       "      <th>rec_player</th>\n",
       "      <th>distance_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4840</th>\n",
       "      <td>Kemba Walker</td>\n",
       "      <td>1</td>\n",
       "      <td>Bradley Beal</td>\n",
       "      <td>0.042992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4841</th>\n",
       "      <td>Kemba Walker</td>\n",
       "      <td>2</td>\n",
       "      <td>Damian Lillard</td>\n",
       "      <td>0.056973</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4842</th>\n",
       "      <td>Kemba Walker</td>\n",
       "      <td>3</td>\n",
       "      <td>Mike Conley</td>\n",
       "      <td>0.071462</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4843</th>\n",
       "      <td>Kemba Walker</td>\n",
       "      <td>4</td>\n",
       "      <td>Kyrie Irving</td>\n",
       "      <td>0.085517</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4844</th>\n",
       "      <td>Kemba Walker</td>\n",
       "      <td>5</td>\n",
       "      <td>James Harden</td>\n",
       "      <td>0.093934</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4845</th>\n",
       "      <td>Kemba Walker</td>\n",
       "      <td>6</td>\n",
       "      <td>Stephen Curry</td>\n",
       "      <td>0.096339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4846</th>\n",
       "      <td>Kemba Walker</td>\n",
       "      <td>7</td>\n",
       "      <td>D'Angelo Russell</td>\n",
       "      <td>0.142434</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4847</th>\n",
       "      <td>Kemba Walker</td>\n",
       "      <td>8</td>\n",
       "      <td>Blake Griffin</td>\n",
       "      <td>0.148542</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4848</th>\n",
       "      <td>Kemba Walker</td>\n",
       "      <td>9</td>\n",
       "      <td>LeBron James</td>\n",
       "      <td>0.149724</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4849</th>\n",
       "      <td>Kemba Walker</td>\n",
       "      <td>10</td>\n",
       "      <td>Jrue Holiday</td>\n",
       "      <td>0.150772</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     search_player  rec_number        rec_player  distance_score\n",
       "4840  Kemba Walker           1      Bradley Beal        0.042992\n",
       "4841  Kemba Walker           2    Damian Lillard        0.056973\n",
       "4842  Kemba Walker           3       Mike Conley        0.071462\n",
       "4843  Kemba Walker           4      Kyrie Irving        0.085517\n",
       "4844  Kemba Walker           5      James Harden        0.093934\n",
       "4845  Kemba Walker           6     Stephen Curry        0.096339\n",
       "4846  Kemba Walker           7  D'Angelo Russell        0.142434\n",
       "4847  Kemba Walker           8     Blake Griffin        0.148542\n",
       "4848  Kemba Walker           9      LeBron James        0.149724\n",
       "4849  Kemba Walker          10      Jrue Holiday        0.150772"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "recommendation_df[recommendation_df['search_player']=='Kemba Walker']"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
